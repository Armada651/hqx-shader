/* COMPATIBILITY 
   - HLSL compilers
   - Cg   compilers
*/


/*
* Copyright (C) 2003 Maxim Stepin ( maxst@hiend3d.com )
*
* Copyright (C) 2010 Cameron Zemek ( grom@zeminvaders.net )
*
* Copyright (C) 2014 Jules Blok ( jules@aerix.nl )
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU Lesser General Public
* License as published by the Free Software Foundation; either
* version 2.1 of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
* Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public
* License along with this program; if not, write to the Free Software
* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
*/

const static half3x3 yuv = half3x3(0.299, 0.587, 0.114, -0.169, -0.331, 0.499, 0.499, -0.418, -0.0813);
const static float3 yuv_threshold = float3(1.0 / 48.0, 1.0 / 7.0, 1.0 / 6.0);

bool yuv_diff(float3 yuv1, float3 yuv2) {
	bool3 res = abs(yuv1 - yuv2) > yuv_threshold;
    return res.x || res.y || res.z;
}

struct input
{
	half2 video_size;
	float2 texture_size;
	half2 output_size;
};

struct out_vertex {
	float4 position : POSITION;
	float4 color    : COLOR;
	float2 texCoord : TEXCOORD0;
	float4 t1;
	float4 t2;
	float4 t3;
};

/*    VERTEX_SHADER    */
out_vertex main_vertex
(
	float4 position	: POSITION,
	float4 color	: COLOR,
	float2 texCoord : TEXCOORD0,

   	uniform half4x4 modelViewProj,
	uniform input IN
)
{
	out_vertex OUT;

	OUT.position = mul(modelViewProj, position);
	OUT.color = color;

	float2 ps = float2(1.0/IN.texture_size.x, 1.0/IN.texture_size.y);
	float dx = ps.x;
	float dy = ps.y;

	//   +----+----+----+
	//   |    |    |    |
	//   | w1 | w2 | w3 |
	//   +----+----+----+
	//   |    |    |    |
	//   | w4 | w5 | w6 |
	//   +----+----+----+
	//   |    |    |    |
	//   | w7 | w8 | w9 |
	//   +----+----+----+

	OUT.texCoord = texCoord;
	OUT.t1 = texCoord.xxxy + half4(-dx, 0, dx, -dy); //  w1 | w2 | w3
	OUT.t2 = texCoord.xxxy + half4(-dx, 0, dx,   0); //  w4 | w5 | w6
	OUT.t3 = texCoord.xxxy + half4(-dx, 0, dx,  dy); //  w7 | w8 | w9

	return OUT;
}


/*    FRAGMENT SHADER    */
float4 main_fragment(in out_vertex VAR, uniform sampler2D decal : TEXUNIT0, uniform input IN, uniform sampler2D LUT : TEXUNIT1) : COLOR
{
	float2 index;
	float2 fp = frac(VAR.texCoord*IN.texture_size);
	bool2 quad = fp > 0.5;

	half3 w1  = tex2D(decal, VAR.t1.xw).rgb;
	half3 w2  = tex2D(decal, VAR.t1.yw).rgb;
	half3 w3  = tex2D(decal, VAR.t1.zw).rgb;

	half3 w4  = tex2D(decal, VAR.t2.xw).rgb;
	half3 w5  = tex2D(decal, VAR.t2.yw).rgb;
	half3 w6  = tex2D(decal, VAR.t2.zw).rgb;

	half3 w7  = tex2D(decal, VAR.t3.xw).rgb;
	half3 w8  = tex2D(decal, VAR.t3.yw).rgb;
	half3 w9  = tex2D(decal, VAR.t3.zw).rgb;

	float3 yuv1 = mul(yuv, w1);
	float3 yuv2 = mul(yuv, w2);
	float3 yuv3 = mul(yuv, w3);

	float3 yuv4 = mul(yuv, w4);
	float3 yuv5 = mul(yuv, w5);
	float3 yuv6 = mul(yuv, w6);

	float3 yuv7 = mul(yuv, w7);
	float3 yuv8 = mul(yuv, w8);
	float3 yuv9 = mul(yuv, w9);

	bool3x3 pattern = bool3x3(yuv_diff(yuv5, yuv1), yuv_diff(yuv5, yuv2), yuv_diff(yuv5, yuv3),
	                          yuv_diff(yuv5, yuv4), false               , yuv_diff(yuv5, yuv6),
							  yuv_diff(yuv5, yuv7), yuv_diff(yuv5, yuv8), yuv_diff(yuv5, yuv9));
	float4x3 pixels;
	bool3 cross;
	if (quad.x && quad.y) {
		index.y = 4;
		pixels = float4x3(w5, w6, w8, w9);
		cross = bool3(yuv_diff(yuv6, yuv2), yuv_diff(yuv6, yuv8), yuv_diff(yuv8, yuv4));
	} else if (quad.x) {
		index.y = 2;
		pixels = float4x3(w5, w2, w3, w6);
		cross = bool3(yuv_diff(yuv6, yuv2), yuv_diff(yuv6, yuv8), yuv_diff(yuv2, yuv4));
	} else if (quad.y) {
		index.y = 3;
		pixels = float4x3(w5, w4, w7, w8);
		cross = bool3(yuv_diff(yuv4, yuv2), yuv_diff(yuv4, yuv8), yuv_diff(yuv8, yuv6));
	} else {
		index.y = 1;
		pixels = float4x3(w5, w1, w2, w4);
		cross = bool3(yuv_diff(yuv2, yuv6), yuv_diff(yuv2, yuv4), yuv_diff(yuv4, yuv8));
	}

	index.x = dot(pattern[0], float3(1, 2, 4)) +
	          dot(pattern[1], float3(8, 0, 16)) +
			  dot(pattern[2], float3(32, 64, 128)) +
			  dot(cross, float3(256, 512, 1024));
	half2 offset = 1.0 / (2.0 * half2(2048.0, 4.0));
	float4 vec = tex2D(LUT, 1.0 / index + offset) * 255.0;
	float3 res = mul(transpose(pixels), vec);

	return float4(res, 1.0);
}
